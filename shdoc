#!/usr/bin/gawk -f
# vim: ft=awk ts=4 sw=4

BEGIN {
    if (! style) {
        style = "github"
    }

    styles["github", "h1", "from"] = ".*"
    styles["github", "h1", "to"] = "# &"

    styles["github", "h2", "from"] = ".*"
    styles["github", "h2", "to"] = "## &"

    styles["github", "h3", "from"] = ".*"
    styles["github", "h3", "to"] = "### &"

    styles["github", "h4", "from"] = ".*"
    styles["github", "h4", "to"] = "#### &"

    styles["github", "code", "from"] = ".*"
    styles["github", "code", "to"] = "```&"

    styles["github", "/code", "to"] = "```"

    styles["github", "argN", "from"] = "^(\\$[0-9]+)[[:blank:]]+(\\S+)[[:blank:]]+"
    styles["github", "argN", "to"] = "**\\1** (\\2): "

    styles["github", "arg@", "from"] = "^\\$@[[:blank:]]+(\\S+)[[:blank:]]+"
    styles["github", "arg@", "to"] = "**...** (\\1): "

    styles["github", "set", "from"] = "^(\\S+) (\\S+)"
    styles["github", "set", "to"] = "**\\1** (\\2):"

    styles["github", "li", "from"] = ".*"
    styles["github", "li", "to"] = "* &"

    styles["github", "i", "from"] = ".*"
    styles["github", "i", "to"] = "_&_"

    styles["github", "anchor", "from"] = ".*"
    styles["github", "anchor", "to"] = "[&](#&)"

    styles["github", "exitcode", "from"] = "([>!]?[0-9]{1,3}) (.*)"
    styles["github", "exitcode", "to"] = "**\\1**: \\2"

    stderr_section_flag = 0

    debug_enable = ENVIRON["SHDOC_DEBUG"] == "1"
    debug_fd = ENVIRON["SHDOC_DEBUG_FD"]
    if (!debug_fd) {
        debug_fd = 2
    }
    debug_file = "/dev/fd/" debug_fd
}

# @description Display the given error message with its line number on stderr.
#              and exit with error.
# @arg $message string A error message.
# @exitcode 1
function error(message) {
    error_message_color="\033[1;31m"
    color_clear="\033[1;0m"
    printf("%sline %4s, error : %s%s\n",\
        error_message_color, NR, message, color_clear) > "/dev/stderr"
    exit 1
}

# @description Display the given warning message with its line number on stderr.
# @arg $message string A warning message.
function warn(message) {
    warn_message_color="\033[1;34m"
    color_clear="\033[1;0m"
    printf("%sline %4s, warning : %s%s\n", \
        warn_message_color, NR, message, color_clear) > "/dev/stderr"
}

function render(type, text) {
    return gensub( \
        styles[style, type, "from"],
        styles[style, type, "to"],
        "g",
        text \
    )
}

function render_toc_link(text) {
    # URL processing
    # @see Regexp sourced from https://stackoverflow.com/questions/3183444/check-for-valid-link-url

    # If text start by '/', './' or '../', assume it is a relative link.
    if (text ~ /^\.{0,2}\//) {
        return "[" text "](" text ")"
    }

    # If text contains URLs, but not a markdown links, transform the URLs in markdown links.
    # Assume a URL is in a markdown link if it follow '](' string.
    if ("  " text " " ~ /[^\]]([^a-z(]|\()[a-z]+:\/\/[-[:alnum:]+&@#\/%?=~_|!:,.;]*[-[:alnum:]\+&@#\/%=~_|]/) {
        # Add space at the end of text to allow for easy detection of URLs.
        text = "  " text " "
        # Enclose URLs in markdown links.
        text = gensub(/([^\]]([^a-z(]|\())([a-z]+:\/\/[-[:alnum:]+&@#\/%?=~_|!:,.;]*[-[:alnum:]\+&@#\/%=~_|])/, "\\1[\\3](\\3)", "g", text)
        # Trim spaces added to ease unenclosed URL regex creation.
        gsub(/^[[:blank:]]*/, "", text)
        gsub(/[[:blank:]]*$/, "", text)
        return text
    }

    # If title contains a markdown link, return as is.
    if (text ~ /\[[^\]]*\]([^)]*)/) {
        return text
    }

    url = text
    if (style == "github") {
      # @see https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb#L44-L45
      url = tolower(url)
      gsub(/[^[:alnum:] _-]/, "", url)
      gsub(/ /, "-", url)
    }

    return "[" text "](#" url ")"
}

function render_toc_item(title) {
    return "* " render_toc_link(title)
}

function unindent(text) {
    split(text, text_lines, "\n")

    # find a maximum level indent as a starting point
    # find a first non empty line
    start = 0
    max_indent = 0
    for (i = 0; i < length(text_lines); i++) {
        if (text_lines[i] != "" && start == 0) {
            start = i
        }

        match(text_lines[i], /^[ ]*/)
        if (RLENGTH > max_indent) {
            max_indent = RLENGTH
        }
    }

    # find a minimum level of indentation
    indent = max_indent
    for (i = start; i < length(text_lines); i++) {
        match(text_lines[i], /^[ ]*/)
        if (RLENGTH < indent) {
            indent = RLENGTH
        }
    }

    # remove the minimum level of indentation and join text_lines
    for (i = start; i < length(text_lines); i++) {
        text_lines[i] = substr(text_lines[i], indent + 1)
        if (i == start) {
            result = text_lines[i]
        } else {
            result = result "\n" text_lines[i]
        }
    }

    return result
}

function reset() {
    debug("→ reset()")

    delete docblock
    description = ""
}

function handle_description() {
    debug("→ handle_description")
    if (description == "") {
        debug("→ → description: empty")
        return;
    }

    if (section != "" && section_description == "") {
      debug("→ → description: added")
      section_description = description
      return;
    }

    if (file_description == "") {
        debug("→ → description: added")
        file_description = description
        return;
    }
}

function concat(x, text) {
    if (x == "") {
        x = text
    } else {
        x = x "\n" text
    }

    return x
}

function push(arr, value) {
    arr[length(arr)+1] = value
}

function join(arr) {
    for (i = 0; i < length(lines); i++) {
        if (i == 0) {
            result = lines[i]
        } else {
            result = result "\n" lines[i]
        }
    }

    return result
}

# @description Remove leading and trailing space from line(s) of text.
# @arg text A text.
# @return The trimmed text.
function trim(text) {
    gsub(/(^[[:blank:]]+|[[:blank:]]+$)/, "", text)
    return text
}

function docblock_set(key, value) {
    docblock[key] = value
}

function docblock_concat(key, value) {
    if (key in docblock) {
        docblock[key] = concat(docblock[key], value)
    } else {
        docblock[key] = value
    }
}

function docblock_push(key, value) {
    docblock[key][length(docblock[key])+1] = value
}


# @description Append a text to the last item of a docblock.
#
# @param docblock_name  Name of the modified docblock.
# @param text           Appended text.
#
# @set docblock[docblock_name] docblock with text appended to last item.
function docblock_append(docblock_name, text) {
    # Detect last docblock item index.
    last_item_index = length(docblock[docblock_name])
    # Append text to last docblock item.
    docblock[docblock_name][last_item_index] = docblock[docblock_name][last_item_index] text
}

# @description Render a docblock as an unordered list.
#
# @param dockblock      Dockblock array.
# @param dockblock_name Name of the rendered docblock.
# @param title          Title of the rendered section.
#
# @stdout A unordered list of the dockblock entries.
function render_docblock_list(docblock, docblock_name, title) {
    push(lines, render("h4", title) "\n")
    # Initialize list item.
    item = ""
    # For each dockblock line.
    for (i in docblock[docblock_name]) {
        # Ident additionnal lines to add them to the markdown list item.
        gsub(/\n/, "\n  ", docblock[docblock_name][i])
        item = render("li", docblock[docblock_name][i])
        push(lines, item)
    }

    # Add empty line to signal end of list in markdown.
    push(lines, "")
}

function render_docblock(func_name, description, docblock) {
    debug("→ render_docblock")
    debug("→ → func_name: [" func_name "]")
    debug("→ → description: [" description "]")

    if (section != "") {
      lines[0] = render("h2", section)
      if (section_description != "") {
        push(lines, section_description)
      }
      section = ""
      section_description = ""
      push(lines, render("h3", func_name))
      push(lines, "")
    } else {
      lines[0] = render("h3", func_name)
    }
    
    if (description != "") {
        push(lines, description)
    }

    if ("example" in docblock) {
        push(lines, render("h4", "Example"))
        push(lines, "\n" render("code", "bash"))
        push(lines, unindent(docblock["example"]))
        push(lines, render("/code"))
        push(lines, "")
    }

    if ("arg" in docblock) {
        push(lines, render("h4", "Arguments") "\n")

        # Sort args by indexes (i.e. by argument number.)
        asorti(docblock["arg"], sorted_indexes)
        for (i in sorted_indexes) {
            item = docblock["arg"][sorted_indexes[i]]
            # Render numbered arguments ($[0-9]+).
            item = render("argN", item)
            # Render catch-all argument ($@).
            item = render("arg@", item)
            item = render("li", item)
            push(lines, item)
        }

        # Add empty line to signal end of list in markdown.
        push(lines, "")
    }

    if ("noargs" in docblock) {
        push(lines, render("i", "Function has no arguments.") "\n")
    }

    if ("set" in docblock) {
        push(lines, render("h4", "Variables set") "\n")
        for (i in docblock["set"]) {
            item = docblock["set"][i]
            item = render("set", item)
            item = render("li", item)
            if (i == length(docblock["set"])) {
                item = item "\n"
            }
            push(lines, item)
        }
    }

    if ("exitcode" in docblock) {
        push(lines, render("h4", "Exit codes") "\n")
        for (i in docblock["exitcode"]) {
            item = render("li", render("exitcode", docblock["exitcode"][i]))
            if (i == length(docblock["exitcode"])) {
                item = item "\n"
            }
            push(lines, item)
        }
    }

    if ("stdin" in docblock) {
        render_docblock_list(docblock, "stdin", "Input on stdin")
    }

    if ("stdout" in docblock) {
        render_docblock_list(docblock, "stdout", "Output on stdout")
    }

    if ("stderr" in docblock) {
        render_docblock_list(docblock, "stderr", "Output on stderr")
    }

    if ("see" in docblock) {
        push(lines, render("h4", "See also") "\n")
        for (i in docblock["see"]) {
            item = render("li", render_toc_link(docblock["see"][i]))
            if (i == length(docblock["see"])) {
                item = item "\n"
            }
            push(lines, item)
        }
    }


    result = join(lines)
    delete lines
    return join(lines)
}

function debug(msg) {
    if (debug_enable) {
        print "DEBUG: " msg > debug_file
    }
}

{
    debug("line: [" $0 "]")
}

/^[[:space:]]*# @internal/ {
    debug("→ @internal")
    is_internal = 1

    next
}

/^[[:space:]]*# @(name|file)/ {
    debug("→ @name|@file")
    sub(/^[[:space:]]*# @(name|file) /, "")
    file_title = $0

    next
}

/^[[:space:]]*# @brief/ {
    debug("→ @brief")
    sub(/^[[:space:]]*# @brief /, "")
    file_brief = $0

    next
}

/^[[:space:]]*# @description/ {
    debug("→ @description")
    in_description = 1
    in_example = 0

    handle_description()

    reset()
}

in_description {
    if (/^[^[[:space:]]*#]|^[[:space:]]*# @[^d]|^[[:space:]]*[^#]|^[[:space:]]*$/) {
        debug("→ → in_description: leave")
        if (!match(description, /\n$/)) {
            description = description "\n"
        }

        in_description = 0

        handle_description()
    } else {
        debug("→ → in_description: concat")
        sub(/^[[:space:]]*# @description[[:space:]]*/, "")
        sub(/^[[:space:]]*#[[:space:]]*/, "")
        sub(/^[[:space:]]*#$/, "")

        description = concat(description, $0)
        next
    }
}

/^[[:space:]]*# @section/ {
  debug("→ @section")
  sub(/^[[:space:]]*# @section /, "")
  section = $0

  next
}

/^[[:space:]]*# @example/ {
    debug("→ @example")

    in_example = 1


    next
}

in_example {
    if (! /^[[:space:]]*#[ ]{1,}/) {
        debug("→ → in_example: leave")
        in_example = 0
    } else {
        debug("→ → in_example: concat")
        sub(/^[[:space:]]*#/, "")

        docblock_concat("example", $0)
        next
    }

}

# Select @arg lines with content.
/^[[:blank:]]*#[[:blank:]]+@arg[[:blank:]]+[^[:blank:]]/ {
    debug("→ @arg")
    
    arg_text = $0

    # Remove '# @arg ' tag.
    sub(/^[[:blank:]]*#[[:blank:]]+@arg[[:blank:]]+/, "", arg_text)

    # Trim text.
    arg_text = trim(arg_text)

    # Test if @arg is a numbered item (or $@).
    if(match(arg_text, /^\$([0-9]+|@)[[:space:]]/, contents)) {
        debug(" → → found arg $" arg_number)

        # Fetch matched values.
        arg_number = contents[1]

        # Zero pad argument number for sorting.
        if(arg_number ~ /[0-9]+/){
            arg_number = sprintf("%03d", arg_number)
        }

        # Add arg description to arg docblock.
        # arg_number is used as indice for sorting.
        docblock["arg"][arg_number] = arg_text

        # Stop processing current line, and process next line.
        next
    }

    # Ignore badly formated @arg.
    warn("Invalid format: @arg " arg_text)
}

# Select @noargs line with no additionnal text.
/^[[:space:]]*#[[:blank:]]+@noargs[[:blank:]]*$/ {
    debug("→ @noargs")
    docblock["noargs"] = 1

    # Stop processing current line, and process next line.
    next
}

/^[[:space:]]*# @set/ {
    debug("→ @set")
    sub(/^[[:space:]]*# @set /, "")

    docblock_push("set", $0)

    next
}

/^[[:space:]]*# @exitcode/ {
    debug("→ @exitcode")
    sub(/^[[:space:]]*# @exitcode /, "")

    docblock_push("exitcode", $0)

    next
}

/^[[:space:]]*# @see/ {
    debug("→ @see")
    sub(/[[:space:]]*# @see /, "")

    docblock_push("see", $0)

    next
}

# Previous line added a new docblock item.
# Check if current line has the needed indentation
# for it to be a multiple lines docblock item.
multiple_line_docblock_name {
    # Check if current line indentation does match the previous line docblock item.
    if ($0 ~ multiple_line_identation_regex ) {
        debug("→ @" multiple_line_docblock_name)
        
        # Current line has the same indentation as the stderr section.
    
        # Remove indentation and trailing spaces.
        sub(/^[[:space:]]*#[[:space:]]+/, "")
        sub(/[[:space:]]+$/, "")

        # Push matched message to corresponding docblock.
        docblock_append(multiple_line_docblock_name, "\n" $0)

        # Stop processing current line, and process next line.
        next
    } else {
        # End previous line docblock item.
        multiple_line_docblock_name = ""
    }
}

# Process similarly @stdin, @stdout and @stderr entries.
# Allow for multiple lines entries.
match($0, /^([[:blank:]]*#[[:blank:]]+)@(stdin|stdout|stderr)[[:blank:]]+(.*[^[:blank:]])[[:blank:]]*$/, contents) {
    # Fetch matched values.
    indentation = contents[1]
    docblock_name = contents[2]
    text = contents[3]

    debug("→ @" docblock_name)

    # Push matched message to corresponding docblock.
    docblock_push(docblock_name, text)

    # Signal the start of a multiple line section.
    multiple_line_docblock_name = docblock_name
    multiple_line_identation_regex = "^" indentation "[[:blank:]]+[^[:blank:]].*$"

    # Stop processing current line, and process next line.
    next
}

/^[ \t]*(function([ \t])+)?([a-zA-Z0-9_\-:-\\.]+)([ \t]*)(\(([ \t]*)\))?[ \t]*\{/ \
    && (length(docblock) != 0 || description != "") && !in_example {
    debug("→ function")
    if (is_internal) {
        debug("→ → function: it is internal, skip")
        is_internal = 0
    } else {
        debug("→ → function: register")

        is_internal = 0
        func_name = gensub(\
            /^[ \t]*(function([ \t])+)?([a-zA-Z0-9_\-:-\\.]+)[ \t]*\(.*/, \
            "\\3", \
            "g" \
        )

        doc = concat(doc, render_docblock(func_name, description, docblock))
        toc = concat(toc, render_toc_item(func_name))
    }

    reset()
    next
}

/^[^#]*$/ {
    debug("→ break")
    handle_description();
    reset()
    next
}

{
    debug("→ NOT HANDLED")
}

END {
    debug("→ END {")
    debug("→ → file_title:       [" file_title "]")
    debug("→ → file_brief:       [" file_brief "]")
    debug("→ → file_description: [" file_description "]")
    debug("→ END }")

    if (file_title != "") {
        print render("h1", file_title)

        if (file_brief != "") {
            print "\n" file_brief
        }

        if (file_description != "") {
            print "\n" render("h2", "Overview")
            print "\n" file_description
        }
    }

    if (toc != "") {
        print render("h2", "Index") "\n"
        print toc
    }

    print "\n" doc

    ## TODO: add examples section
}
